/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, shortString } from "starknet";
import { DojoProvider } from "@dojoengine/core"; 

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface PlayProps {
    account: Account | AccountInterface;
    game_id: number;
    rowIndex: number;
    colIndex: number;
}

interface CreateRoundProps {
    account: AccountInterface;
    game_id: number;
}

interface EndGameProps {
    account: AccountInterface;
    game_id: number;
}

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const create_game = async ({ account, username }: { account: AccountInterface, username: string }) => {
            try {
                return await provider.execute(account, {
                    contractName: "game_system",
                    entrypoint: "create_game",
                    calldata: [shortString.encodeShortString(username)],
                });
            } catch (error) {
                console.error("Error executing create game:", error);
                throw error;
            }
        };

        const play = async ({ account, game_id, rowIndex, colIndex }: PlayProps) => {
            try {
                return await provider.execute(account, {
                    contractName: "game_system",
                    entrypoint: "play",
                    calldata: [game_id, rowIndex, colIndex]
                });
            } catch (error) {
                console.error("Error executing play:", error);
                throw error;
            }
        };

        const create_round = async ({ account, game_id}: CreateRoundProps) => {
            try {
                return await provider.execute(account, {
                    contractName: "game_system",
                    entrypoint: "create_round",
                    calldata: [game_id]
                });
            } catch (error) {
                console.error("Error executing create_round:", error);
                throw error;
            }
        };

        const end_game = async ({ account, game_id}: EndGameProps) => {
            try {
                return await provider.execute(account, {
                    contractName: "game_system",
                    entrypoint: "end_game",
                    calldata: [game_id]
                });
            } catch (error) {
                console.error("Error executing end_game:", error);
                throw error;
            }
        };
    
        return { create_game, play, create_round, end_game};
    }
    return {
        actions: actions(),
    };
}
